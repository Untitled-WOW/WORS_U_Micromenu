-- -- Function to initialize Prayer level from rep
-- local magicLevel = 1
-- local function InitializeMagicLevel()
	-- _, _, magicLevel, _, _, _ = WORSSkillsUtil.GetSkillInfo(Enum.WORSSkills.Magic)
-- end

-- local magicButtons = {}

-- local function SetupMagicButtons()
    -- if InCombatLockdown() then return end

    -- local buttonSize = 20
    -- local padding    = 5
    -- local margin     = 10
    -- local columns    = 7

    -- for i, spellData in ipairs(WORS_U_SpellBook.spells) do
        -- local spellID       = spellData.id
        -- local requiredLevel = spellData.level
        -- local spellName, _, spellIcon = GetSpellInfo(spellID)

        -- local spellButton = magicButtons[i]
        -- if not spellButton then
            -- spellButton = CreateFrame("Button", nil, WORS_U_SpellBook.frame, "SecureActionButtonTemplate")
            -- spellButton:SetSize(buttonSize, buttonSize)

            -- spellButton:RegisterForDrag("LeftButton")
            -- spellButton:SetScript("OnDragStart", function(self)
                -- if not self.spellID then return end
                -- local name = GetSpellInfo(self.spellID)
                -- if name and IsSpellKnown(self.spellID) then
                    -- PickupSpell(name)  -- <-- this works on 3.3.5
                -- end
            -- end)
            -- spellButton.icon = spellButton:CreateTexture(nil, "BACKGROUND")
            -- spellButton.icon:SetAllPoints()

            -- spellButton:SetScript("OnEnter", function(self)
                -- GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
                -- if self.spellID then
                    -- GameTooltip:SetSpellByID(self.spellID)

                    -- local sd = WORS_U_SpellBook.spells[self.index]
                    -- if sd and magicLevel < sd.level then
                        -- GameTooltip:AddLine("Requires Magic Level " .. sd.level, 1, 0, 0, true)
                        -- GameTooltip:Show()
                    -- end
                -- end
            -- end)
            -- spellButton:SetScript("OnLeave", GameTooltip_Hide)

            -- magicButtons[i] = spellButton
        -- end

        -- spellButton.index = i
        -- spellButton.spellID = spellID
        -- spellButton:SetAttribute("type", "spell")
        -- spellButton:SetAttribute("spell", spellID)

        -- spellButton.icon:SetTexture(spellIcon or "Interface\\Icons\\INV_Misc_QuestionMark")

        -- local row    = math.floor((i - 1) / columns)
        -- local column = (i - 1) % columns
        -- spellButton:ClearAllPoints()
        -- spellButton:SetPoint(
            -- "TOPLEFT", WORS_U_SpellBook.frame, "TOPLEFT",
            -- margin + (buttonSize + padding) * column,
            -- -margin - (buttonSize + padding) * row
        -- )

        -- if magicLevel < requiredLevel then
            -- spellButton.icon:SetVertexColor(0.1, 0.1, 0.1)
        -- elseif WORS_U_SpellBook:HasRequiredRunes(spellData.runes) then
            -- spellButton.icon:SetVertexColor(1, 1, 1)
        -- else
            -- spellButton.icon:SetVertexColor(0.25, 0.25, 0.25)
        -- end

        -- spellButton:Show()
    -- end

    -- for i = #WORS_U_SpellBook.spells + 1, #magicButtons do
        -- if magicButtons[i] then
            -- magicButtons[i]:Hide()
        -- end
    -- end
-- end
	



-- -- ===========================
-- -- SECURE WRAPPER + VISIBILITY
-- -- ===========================

-- -- Create the main frame as a secure handler so it can Show/Hide in combat
-- --WORS_U_SpellBook.frame = CreateFrame("Frame", "WORS_U_SpellBookFrame", UIParent, "SecureHandlerStateTemplate,OldSchoolFrameTemplate")

-- WORS_U_SpellBook.frame:SetSize(192, 304)
-- WORS_U_SpellBook.frame:SetFrameStrata("LOW")
-- WORS_U_SpellBook.frame:SetFrameLevel(10)

-- local bg = WORS_U_SpellBook.frame:CreateTexture(nil, "LOW")
-- WORS_U_SpellBook.frame.Background = bg
-- bg:SetTexture("Interface\\WORS\\OldSchoolBackground1")
-- bg:SetAllPoints(WORS_U_SpellBook.frame)
-- bg:SetHorizTile(true)
-- bg:SetVertTile(true)

-- WORS_U_SpellBook.frame:Hide()
-- WORS_U_SpellBook.frame:SetMovable(true)
-- WORS_U_SpellBook.frame:EnableMouse(true)
-- WORS_U_SpellBook.frame:RegisterForDrag("LeftButton")
-- WORS_U_SpellBook.frame:SetClampedToScreen(true)

-- WORS_U_SpellBook.frame:SetScript("OnDragStart", function(self) self:StartMoving() end)
-- WORS_U_SpellBook.frame:SetScript("OnDragStop", function(self) 
	-- self:StopMovingOrSizing() 
	-- SaveFramePosition(self)
-- end)


-- -- Hide template button to use securec
-- if WORS_U_SpellBookFrame.CloseButton then WORS_U_SpellBookFrame.CloseButton:ClearAllPoints() end

-- -- Update micro button tint on show/hide
-- local function UpdateButtonBackground()
    -- if WORS_U_SpellBook.frame:IsShown() then
        -- --SpellbookMicroButton:GetNormalTexture():SetVertexColor(1, 0, 0) -- red when open
		-- U_SpellMicroMenuButton:SetButtonState("PUSHED", true)
    -- else
        -- --SpellbookMicroButton:GetNormalTexture():SetVertexColor(1, 1, 1) -- default
		-- U_SpellMicroMenuButton:SetButtonState("NORMAL", true)
    -- end
-- end
-- WORS_U_SpellBook.frame:SetScript("OnShow", UpdateButtonBackground)
-- WORS_U_SpellBook.frame:SetScript("OnHide", UpdateButtonBackground)

-- -- =========================================
-- -- EVENTS: keep icons up-to-date 
-- -- =========================================
-- local eventFrame = CreateFrame("Frame")
-- eventFrame:RegisterEvent("BAG_UPDATE")
-- eventFrame:RegisterEvent("PLAYER_REGEN_ENABLED") 
-- eventFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
-- --eventFrame:RegisterEvent("PLAYER_EQUIPMENT_CHANGED")
-- eventFrame:SetScript("OnEvent", function(self, event)
	-- if event == "PLAYER_ENTERING_WORLD" then
		-- if InCombatLockdown() then return end
		-- local pos = WORS_U_MicroMenuSettings.MicroMenuPOS
		-- if pos then
			-- local relativeTo = pos.relativeTo and _G[pos.relativeTo] or UIParent
			-- WORS_U_SpellBook.frame:SetPoint(pos.point, relativeTo, pos.relativePoint, pos.xOfs, pos.yOfs)
		-- else
			-- ResetMicroMenuPOSByAspect(WORS_U_SpellBook.frame)
		-- end	
		-- InitializeMagicLevel()
		-- SetupMagicButtons()	
	-- elseif event == "PLAYER_REGEN_ENABLED" then
		-- InitializeMagicLevel()
		-- SetupMagicButtons()
	-- elseif event == "BAG_UPDATE" then
		-- if InCombatLockdown() then return end
		-- InitializeMagicLevel()
		-- SetupMagicButtons()
	-- end
-- end)

-- -- =========================
-- -- SECURE TOGGLE + CLOSE UI
-- -- =========================

-- -- Secure TOGGLE overlay on the U_SpellBookMicroButtonCopy


-- -- Secure CLOSE button inside the frame (works in combat)
-- local closeButton = CreateFrame("Button", nil, WORS_U_SpellBook.frame, "SecureHandlerClickTemplate")
-- closeButton:SetSize(16, 16)
-- closeButton:SetPoint("TOPRIGHT", WORS_U_SpellBook.frame, "TOPRIGHT", 4, 4)
-- WORS_U_SpellBook.closeButton = closeButton
-- closeButton:SetNormalTexture("Interface\\WORS\\OldSchool-CloseButton-Up.blp")
-- closeButton:SetHighlightTexture("Interface\\WORS\\OldSchool-CloseButton-Highlight.blp", "ADD")
-- closeButton:SetPushedTexture("Interface\\WORS\\OldSchool-CloseButton-Down.blp")

-- closeButton:SetFrameRef("uSpellBook", WORS_U_SpellBook.frame)
-- closeButton:SetAttribute("_onclick", [=[
  -- local uSpellBook = self:GetFrameRef("uSpellBook")
  -- uSpellBook:SetAttribute("userToggle", nil)
  -- uSpellBook:Hide()
-- ]=])




-- -- =========================
-- -- WORS_U_SpellBook.lua
-- -- =========================

-- -- Saved settings for filters
-- if not WORS_U_SpellBookSettings then
    -- WORS_U_SpellBookSettings = {}
-- end
-- WORS_U_SpellBookSettings.filter = WORS_U_SpellBookSettings.filter or "All"
-- WORS_U_SpellBookSettings.hideAboveLevel = WORS_U_SpellBookSettings.hideAboveLevel or false



-- local function GetSpellCategory(spellID)
    -- for group, ids in pairs(WORS_U_SpellBook.filterGroups) do
        -- for _, id in ipairs(ids) do
            -- if id == spellID then
                -- return group
            -- end
        -- end
    -- end
    -- return "Combat"
-- end

-- -- Function to initialize Magic level from rep
-- local magicLevel = 1
-- local function InitializeMagicLevel()
	-- _, _, magicLevel, _, _, _ = WORSSkillsUtil.GetSkillInfo(Enum.WORSSkills.Magic)
-- end

-- local magicButtons = {}

-- local function SetupMagicButtons()
    -- if InCombatLockdown() then return end

    -- local buttonSize = 20
    -- local padding    = 5
    -- local margin     = 10
    -- local columns    = 7

    -- for i, spellData in ipairs(WORS_U_SpellBook.spells) do
        -- local spellID       = spellData.id
        -- local requiredLevel = spellData.level
        -- local spellName, _, spellIcon = GetSpellInfo(spellID)

        -- -- filter checks
        -- local category = GetSpellCategory(spellID)
        -- if (WORS_U_SpellBookSettings.filter ~= "All" and category ~= WORS_U_SpellBookSettings.filter)
        -- or (WORS_U_SpellBookSettings.hideAboveLevel and magicLevel < requiredLevel) then
            -- if magicButtons[i] then magicButtons[i]:Hide() end
        -- else
            -- local spellButton = magicButtons[i]
            -- if not spellButton then
                -- spellButton = CreateFrame("Button", nil, WORS_U_SpellBook.frame, "SecureActionButtonTemplate")
                -- spellButton:SetSize(buttonSize, buttonSize)

                -- spellButton:RegisterForDrag("LeftButton")
                -- spellButton:SetScript("OnDragStart", function(self)
                    -- if not self.spellID then return end
                    -- local name = GetSpellInfo(self.spellID)
                    -- if name and IsSpellKnown(self.spellID) then
                        -- PickupSpell(name)
                    -- end
                -- end)

                -- spellButton.icon = spellButton:CreateTexture(nil, "BACKGROUND")
                -- spellButton.icon:SetAllPoints()

                -- spellButton:SetScript("OnEnter", function(self)
                    -- GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
                    -- if self.spellID then
                        -- GameTooltip:SetSpellByID(self.spellID)
                        -- local sd = WORS_U_SpellBook.spells[self.index]
                        -- if sd and magicLevel < sd.level then
                            -- GameTooltip:AddLine("Requires Magic Level " .. sd.level, 1, 0, 0, true)
                            -- GameTooltip:Show()
                        -- end
                    -- end
                -- end)
                -- spellButton:SetScript("OnLeave", GameTooltip_Hide)

                -- magicButtons[i] = spellButton
            -- end

            -- spellButton.index = i
            -- spellButton.spellID = spellID
            -- spellButton:SetAttribute("type", "spell")
            -- spellButton:SetAttribute("spell", spellID)
            -- spellButton.icon:SetTexture(spellIcon or "Interface\\Icons\\INV_Misc_QuestionMark")

            -- local row    = math.floor((i - 1) / columns)
            -- local column = (i - 1) % columns
            -- spellButton:ClearAllPoints()
            -- spellButton:SetPoint(
                -- "TOPLEFT", WORS_U_SpellBook.frame, "TOPLEFT",
                -- margin + (buttonSize + padding) * column,
                -- -margin - (buttonSize + padding) * row
            -- )

            -- if magicLevel < requiredLevel then
                -- spellButton.icon:SetVertexColor(0.1, 0.1, 0.1)
            -- elseif WORS_U_SpellBook:HasRequiredRunes(spellData.runes) then
                -- spellButton.icon:SetVertexColor(1, 1, 1)
            -- else
                -- spellButton.icon:SetVertexColor(0.25, 0.25, 0.25)
            -- end

            -- spellButton:Show()
        -- end
    -- end

    -- for i = #WORS_U_SpellBook.spells + 1, #magicButtons do
        -- if magicButtons[i] then
            -- magicButtons[i]:Hide()
        -- end
    -- end
-- end

-- -- ===========================
-- -- SECURE WRAPPER + VISIBILITY
-- -- ===========================
-- WORS_U_SpellBook.frame:SetSize(192, 304)
-- WORS_U_SpellBook.frame:SetFrameStrata("LOW")
-- WORS_U_SpellBook.frame:SetFrameLevel(10)

-- local bg = WORS_U_SpellBook.frame:CreateTexture(nil, "LOW")
-- WORS_U_SpellBook.frame.Background = bg
-- bg:SetTexture("Interface\\WORS\\OldSchoolBackground1")
-- bg:SetAllPoints(WORS_U_SpellBook.frame)
-- bg:SetHorizTile(true)
-- bg:SetVertTile(true)

-- WORS_U_SpellBook.frame:Hide()
-- WORS_U_SpellBook.frame:SetMovable(true)
-- WORS_U_SpellBook.frame:EnableMouse(true)
-- WORS_U_SpellBook.frame:RegisterForDrag("LeftButton")
-- WORS_U_SpellBook.frame:SetClampedToScreen(true)

-- WORS_U_SpellBook.frame:SetScript("OnDragStart", function(self) self:StartMoving() end)
-- WORS_U_SpellBook.frame:SetScript("OnDragStop", function(self) 
	-- self:StopMovingOrSizing() 
	-- SaveFramePosition(self)
-- end)

-- if WORS_U_SpellBookFrame.CloseButton then WORS_U_SpellBookFrame.CloseButton:ClearAllPoints() end

-- local function UpdateButtonBackground()
    -- if WORS_U_SpellBook.frame:IsShown() then
		-- U_SpellMicroMenuButton:SetButtonState("PUSHED", true)
    -- else
		-- U_SpellMicroMenuButton:SetButtonState("NORMAL", true)
    -- end
-- end
-- WORS_U_SpellBook.frame:SetScript("OnShow", UpdateButtonBackground)
-- WORS_U_SpellBook.frame:SetScript("OnHide", UpdateButtonBackground)

-- -- =========================================
-- -- EVENTS
-- -- =========================================
-- local eventFrame = CreateFrame("Frame")
-- eventFrame:RegisterEvent("BAG_UPDATE")
-- eventFrame:RegisterEvent("PLAYER_REGEN_ENABLED") 
-- eventFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
-- eventFrame:SetScript("OnEvent", function(self, event)
	-- if event == "PLAYER_ENTERING_WORLD" then
		-- if InCombatLockdown() then return end
		-- local pos = WORS_U_MicroMenuSettings.MicroMenuPOS
		-- if pos then
			-- local relativeTo = pos.relativeTo and _G[pos.relativeTo] or UIParent
			-- WORS_U_SpellBook.frame:SetPoint(pos.point, relativeTo, pos.relativePoint, pos.xOfs, pos.yOfs)
		-- else
			-- ResetMicroMenuPOSByAspect(WORS_U_SpellBook.frame)
		-- end	
		-- InitializeMagicLevel()
		-- SetupMagicButtons()	
	-- elseif event == "PLAYER_REGEN_ENABLED" then
		-- InitializeMagicLevel()
		-- SetupMagicButtons()
	-- elseif event == "BAG_UPDATE" then
		-- if InCombatLockdown() then return end
		-- InitializeMagicLevel()
		-- SetupMagicButtons()
	-- end
-- end)

-- -- =========================
-- -- SECURE CLOSE BUTTON
-- -- =========================
-- local closeButton = CreateFrame("Button", nil, WORS_U_SpellBook.frame, "SecureHandlerClickTemplate")
-- closeButton:SetSize(16, 16)
-- closeButton:SetPoint("TOPRIGHT", WORS_U_SpellBook.frame, "TOPRIGHT", 4, 4)
-- WORS_U_SpellBook.closeButton = closeButton
-- closeButton:SetNormalTexture("Interface\\WORS\\OldSchool-CloseButton-Up.blp")
-- closeButton:SetHighlightTexture("Interface\\WORS\\OldSchool-CloseButton-Highlight.blp", "ADD")
-- closeButton:SetPushedTexture("Interface\\WORS\\OldSchool-CloseButton-Down.blp")

-- closeButton:SetFrameRef("uSpellBook", WORS_U_SpellBook.frame)
-- closeButton:SetAttribute("_onclick", [=[
  -- local uSpellBook = self:GetFrameRef("uSpellBook")
  -- uSpellBook:SetAttribute("userToggle", nil)
  -- uSpellBook:Hide()
-- ]=])

-- -- =========================
-- -- FILTER MENU UI
-- -- =========================
-- local filterMenu = CreateFrame("Frame", nil, WORS_U_SpellBook.frame)
-- filterMenu:SetSize(120, 120)
-- filterMenu:SetPoint("BOTTOM", WORS_U_SpellBook.frame, "BOTTOM", 0, -5)
-- filterMenu:Hide()
-- filterMenu:SetBackdrop({bgFile="Interface\\DialogFrame\\UI-DialogBox-Background"})
-- filterMenu:SetFrameStrata("TOOLTIP")

-- local function CreateFilterButton(text, key, y)
    -- local btn = CreateFrame("Button", nil, filterMenu, "UIPanelButtonTemplate")
    -- btn:SetSize(100, 20)
    -- btn:SetPoint("TOP", filterMenu, "TOP", 0, -y)
    -- btn:SetText(text)
    -- btn:SetScript("OnClick", function()
        -- WORS_U_SpellBookSettings.filter = key
        -- filterMenu:Hide()
        -- SetupMagicButtons()
    -- end)
    -- return btn
-- end

-- CreateFilterButton("All", "All", 5)
-- CreateFilterButton("Combat", "Combat", 30)
-- CreateFilterButton("Teleport", "Teleport", 55)
-- CreateFilterButton("Utility", "Utility", 80)

-- local hideBtn = CreateFrame("CheckButton", nil, filterMenu, "UICheckButtonTemplate")
-- hideBtn:SetPoint("BOTTOM", filterMenu, "BOTTOM", 0, 5)
-- hideBtn.text = hideBtn:CreateFontString(nil, "OVERLAY", "GameFontNormal")
-- hideBtn.text:SetPoint("LEFT", hideBtn, "RIGHT", 2, 0)
-- hideBtn.text:SetText("Hide Above Level")
-- hideBtn:SetChecked(WORS_U_SpellBookSettings.hideAboveLevel)
-- hideBtn:SetScript("OnClick", function(self)
    -- WORS_U_SpellBookSettings.hideAboveLevel = self:GetChecked()
    -- SetupMagicButtons()
-- end)

-- local filterToggle = CreateFrame("Button", nil, WORS_U_SpellBook.frame, "UIPanelButtonTemplate")
-- filterToggle:SetSize(60, 20)
-- filterToggle:SetPoint("BOTTOM", WORS_U_SpellBook.frame, "BOTTOM", 0, 5)
-- filterToggle:SetText("Filter")
-- filterToggle:SetScript("OnClick", function()
    -- if filterMenu:IsShown() then
        -- filterMenu:Hide()
    -- else
        -- hideBtn:SetChecked(WORS_U_SpellBookSettings.hideAboveLevel)
        -- filterMenu:Show()
    -- end
-- end)



-- =========================
-- WORS_U_SpellBook.lua
-- =========================
-- Saved settings for filters
if not WORS_U_SpellBookSettings then
    WORS_U_SpellBookSettings = {}
end

if not WORS_U_SpellBookSettings.activeFilters then
    WORS_U_SpellBookSettings.activeFilters = {
        Combat = true,
        Teleport = true,
        Utility = true,
    }
end

if WORS_U_SpellBookSettings.hideAboveLevel == nil then
    WORS_U_SpellBookSettings.hideAboveLevel = false
end
-- Categories
local function GetSpellCategory(spellID)
    for group, ids in pairs(WORS_U_SpellBook.filterGroups) do
        for _, id in ipairs(ids) do
            if id == spellID then
                return group
            end
        end
    end
    return "Combat"
end

-- Get magic level
local magicLevel = 1
local function InitializeMagicLevel()
	_, _, magicLevel, _, _, _ = WORSSkillsUtil.GetSkillInfo(Enum.WORSSkills.Magic)
end

-- Layout helper (tweak values as you like)
-- buttonSize , padding , margin , columns
local function GetLayoutForCount(count)
    if count <= 8 then
        return 60, 2, 10, 2     -- big buttons, 4 columns
    elseif count <= 15 then
        return 50, 2, 10, 3      -- medium buttons, 5 columns
    else
        return 20, 5, 10, 7    -- small default layout
    end
end

-- =========================
-- Magic Buttons
-- =========================
local magicButtons = {}

local function SetupMagicButtons()
    if InCombatLockdown() then return end

    -- Count visible spells first (after filters)
    local visibleCount = 0
    for _, spellData in ipairs(WORS_U_SpellBook.spells) do
        local category = GetSpellCategory(spellData.id)
        if (WORS_U_SpellBookSettings.filter == "All" or category == WORS_U_SpellBookSettings.filter)
        and (not WORS_U_SpellBookSettings.hideAboveLevel or magicLevel >= spellData.level) then
            visibleCount = visibleCount + 1
        end
    end

    -- Dynamic layout based on count
    local buttonSize, padding, margin, columns = GetLayoutForCount(visibleCount)
    local visibleIndex = 0

    for i, spellData in ipairs(WORS_U_SpellBook.spells) do
        local spellID       = spellData.id
        local requiredLevel = spellData.level
        local spellName, _, spellIcon = GetSpellInfo(spellID)

        -- filter checks
        local category = GetSpellCategory(spellID)
        if (WORS_U_SpellBookSettings.filter ~= "All" and category ~= WORS_U_SpellBookSettings.filter)
        or (WORS_U_SpellBookSettings.hideAboveLevel and magicLevel < requiredLevel) then
            if magicButtons[i] then magicButtons[i]:Hide() end
        else
            visibleIndex = visibleIndex + 1

            local spellButton = magicButtons[i]
            if not spellButton then
                spellButton = CreateFrame("Button", nil, WORS_U_SpellBook.frame, "SecureActionButtonTemplate")
                spellButton:RegisterForDrag("LeftButton")
                spellButton:SetScript("OnDragStart", function(self)
                    if not self.spellID then return end
                    local name = GetSpellInfo(self.spellID)
                    if name and IsSpellKnown(self.spellID) then
                        PickupSpell(name)
                    end
                end)

                spellButton.icon = spellButton:CreateTexture(nil, "BACKGROUND")
                spellButton.icon:SetAllPoints()

                spellButton:SetScript("OnEnter", function(self)
                    GameTooltip:SetOwner(self, "ANCHOR_RIGHT")
                    if self.spellID then
                        GameTooltip:SetSpellByID(self.spellID)
                        local sd = WORS_U_SpellBook.spells[self.index]
                        if sd and magicLevel < sd.level then
                            GameTooltip:AddLine("Requires Magic Level " .. sd.level, 1, 0, 0, true)
                            GameTooltip:Show()
                        end
                    end
                end)
                spellButton:SetScript("OnLeave", GameTooltip_Hide)

                magicButtons[i] = spellButton
            end

            spellButton:SetSize(buttonSize, buttonSize)
            spellButton.index = i
            spellButton.spellID = spellID
            spellButton:SetAttribute("type", "spell")
            spellButton:SetAttribute("spell", spellID)
            spellButton.icon:SetTexture(spellIcon or "Interface\\Icons\\INV_Misc_QuestionMark")

            local row    = math.floor((visibleIndex - 1) / columns)
            local column = (visibleIndex - 1) % columns
            spellButton:ClearAllPoints()
            spellButton:SetPoint(
                "TOPLEFT", WORS_U_SpellBook.frame, "TOPLEFT",
                margin + (buttonSize + padding) * column,
                -margin - (buttonSize + padding) * row
            )

            if magicLevel < requiredLevel then
                spellButton.icon:SetVertexColor(0.1, 0.1, 0.1)
            elseif WORS_U_SpellBook:HasRequiredRunes(spellData.runes) then
                spellButton.icon:SetVertexColor(1, 1, 1)
            else
                spellButton.icon:SetVertexColor(0.25, 0.25, 0.25)
            end

            spellButton:Show()
        end
    end

    for i = #WORS_U_SpellBook.spells + 1, #magicButtons do
        if magicButtons[i] then
            magicButtons[i]:Hide()
        end
    end
end

-- ===========================
-- SECURE WRAPPER + VISIBILITY
-- ===========================
WORS_U_SpellBook.frame:SetSize(192, 304)
WORS_U_SpellBook.frame:SetFrameStrata("LOW")
WORS_U_SpellBook.frame:SetFrameLevel(10)

local bg = WORS_U_SpellBook.frame:CreateTexture(nil, "LOW")
WORS_U_SpellBook.frame.Background = bg
bg:SetTexture("Interface\\WORS\\OldSchoolBackground1")
bg:SetAllPoints(WORS_U_SpellBook.frame)
bg:SetHorizTile(true)
bg:SetVertTile(true)

WORS_U_SpellBook.frame:Hide()
WORS_U_SpellBook.frame:SetMovable(true)
WORS_U_SpellBook.frame:EnableMouse(true)
WORS_U_SpellBook.frame:RegisterForDrag("LeftButton")
WORS_U_SpellBook.frame:SetClampedToScreen(true)

WORS_U_SpellBook.frame:SetScript("OnDragStart", function(self) self:StartMoving() end)
WORS_U_SpellBook.frame:SetScript("OnDragStop", function(self) 
	self:StopMovingOrSizing() 
	SaveFramePosition(self)
end)

if WORS_U_SpellBookFrame.CloseButton then WORS_U_SpellBookFrame.CloseButton:ClearAllPoints() end

local function UpdateButtonBackground()
    if WORS_U_SpellBook.frame:IsShown() then
		U_SpellMicroMenuButton:SetButtonState("PUSHED", true)
    else
		U_SpellMicroMenuButton:SetButtonState("NORMAL", true)
    end
end
WORS_U_SpellBook.frame:SetScript("OnShow", UpdateButtonBackground)
WORS_U_SpellBook.frame:SetScript("OnHide", UpdateButtonBackground)

-- =========================================
-- EVENTS
-- =========================================
local eventFrame = CreateFrame("Frame")
eventFrame:RegisterEvent("BAG_UPDATE")
eventFrame:RegisterEvent("PLAYER_REGEN_ENABLED") 
eventFrame:RegisterEvent("PLAYER_ENTERING_WORLD")
eventFrame:SetScript("OnEvent", function(self, event)
	if event == "PLAYER_ENTERING_WORLD" then
		if InCombatLockdown() then return end
		local pos = WORS_U_MicroMenuSettings.MicroMenuPOS
		if pos then
			local relativeTo = pos.relativeTo and _G[pos.relativeTo] or UIParent
			WORS_U_SpellBook.frame:SetPoint(pos.point, relativeTo, pos.relativePoint, pos.xOfs, pos.yOfs)
		else
			ResetMicroMenuPOSByAspect(WORS_U_SpellBook.frame)
		end	
		InitializeMagicLevel()
		SetupMagicButtons()	
	elseif event == "PLAYER_REGEN_ENABLED" then
		InitializeMagicLevel()
		SetupMagicButtons()
	elseif event == "BAG_UPDATE" then
		if InCombatLockdown() then return end
		InitializeMagicLevel()
		SetupMagicButtons()
	end
end)

-- =========================
-- SECURE CLOSE BUTTON
-- =========================
local closeButton = CreateFrame("Button", nil, WORS_U_SpellBook.frame, "SecureHandlerClickTemplate")
closeButton:SetSize(16, 16)
closeButton:SetPoint("TOPRIGHT", WORS_U_SpellBook.frame, "TOPRIGHT", 4, 4)
WORS_U_SpellBook.closeButton = closeButton
closeButton:SetNormalTexture("Interface\\WORS\\OldSchool-CloseButton-Up.blp")
closeButton:SetHighlightTexture("Interface\\WORS\\OldSchool-CloseButton-Highlight.blp", "ADD")
closeButton:SetPushedTexture("Interface\\WORS\\OldSchool-CloseButton-Down.blp")

closeButton:SetFrameRef("uSpellBook", WORS_U_SpellBook.frame)
closeButton:SetAttribute("_onclick", [=[
  local uSpellBook = self:GetFrameRef("uSpellBook")
  uSpellBook:SetAttribute("userToggle", nil)
  uSpellBook:Hide()
]=])

-- =========================
-- FILTER MENU UI
-- =========================
local filterMenu = CreateFrame("Frame", nil, WORS_U_SpellBook.frame)
filterMenu:SetSize(120, 120)
filterMenu:SetPoint("BOTTOM", WORS_U_SpellBook.frame, "BOTTOM", 0, -5)
filterMenu:Hide()
filterMenu:SetBackdrop({bgFile="Interface\\DialogFrame\\UI-DialogBox-Background"})
filterMenu:SetFrameStrata("TOOLTIP")

local function CreateFilterButton(text, key, y)
    local btn = CreateFrame("Button", nil, filterMenu, "UIPanelButtonTemplate")
    btn:SetSize(100, 20)
    btn:SetPoint("TOP", filterMenu, "TOP", 0, -y)
    btn:SetText(text)
    btn:SetScript("OnClick", function()
        WORS_U_SpellBookSettings.filter = key
        filterMenu:Hide()
        SetupMagicButtons()
    end)
    return btn
end

CreateFilterButton("All", "All", 5)
CreateFilterButton("Combat", "Combat", 30)
CreateFilterButton("Teleport", "Teleport", 55)
CreateFilterButton("Utility", "Utility", 80)

local hideBtn = CreateFrame("CheckButton", nil, filterMenu, "UICheckButtonTemplate")
hideBtn:SetPoint("BOTTOM", filterMenu, "BOTTOM", 0, 5)
hideBtn.text = hideBtn:CreateFontString(nil, "OVERLAY", "GameFontNormal")
hideBtn.text:SetPoint("LEFT", hideBtn, "RIGHT", 2, 0)
hideBtn.text:SetText("Hide Above Level")
hideBtn:SetChecked(WORS_U_SpellBookSettings.hideAboveLevel)
hideBtn:SetScript("OnClick", function(self)
    WORS_U_SpellBookSettings.hideAboveLevel = self:GetChecked()
    SetupMagicButtons()
end)

local filterToggle = CreateFrame("Button", nil, WORS_U_SpellBook.frame, "UIPanelButtonTemplate")
filterToggle:SetSize(60, 20)
filterToggle:SetPoint("BOTTOM", WORS_U_SpellBook.frame, "BOTTOM", 0, 5)
filterToggle:SetText("Filter")
filterToggle:SetScript("OnClick", function()
    if filterMenu:IsShown() then
        filterMenu:Hide()
    else
        hideBtn:SetChecked(WORS_U_SpellBookSettings.hideAboveLevel)
        filterMenu:Show()
    end
end)
